import{o as h,s as o,_ as L,n as f,y as M,p as B,f as y,h as V,S as j,j as W,e as I,g as $,m as b,u as E,F as _,w as z,a as q,b as d,k as K}from"./index-zKAIDSer.js";import{d as H,e as J,a as Z,w as G,g as X,f as Y,p as ee,c as te,b as ie,n as se}from"./index-BnOU0ixL.js";import{i as ae}from"./index-X_2f3GQr.js";const P="nl",l="optimal";var k=(a=>(a[a.public=0]="public",a[a.private=1]="private",a))(k||{}),F=(a=>(a[a.free=0]="free",a[a.premium=1]="premium",a))(F||{}),R=(a=>(a[a.country=1]="country",a[a.location=2]="location",a))(R||{}),oe=(a=>(a.free="free",a.premium="premium",a.custom="custom",a))(oe||{});const ne=h({id:o(),name:o(),code:o(),phrases:o().array()}),ce=h({id:o(),name:o(),phrases:o().array(),region:o(),via:o(),target:o(),countryCode:o(),type:L(k),proxyType:L(F)}),re=h({region:o(),name:o(),description:o(),countryCode:o(),latitude:o(),longitude:o(),networkLoad:o(),priority:f(),type:L(k),proxy_type:L(F)}),ue=h({id:o(),type:M(2)}),le=h({id:o(),type:M(1),items:ue.array()}),he=h({countries:ne.array(),locations:ce.array(),items:le.array()}),pe=h({data:he.optional(),updatedAt:f()}),de=h({type:L(k),region:o(),regionName:o(),countryName:o(),countryCode:o(),custom:B()}),ve=h({activeId:o().optional().describe(y.persist),favoriteIds:o().array().optional().describe(y.persist),locations:pe.optional().describe(y.persist),lastActiveLocationData:de.optional().describe(y.persist),optimalLocationId:o().optional().describe(y.persist)}).default({}),Se=new V(ve);function O(a){return re.safeParse(a).success}const me=720*60*1e3;class ge extends j{constructor(e){super(),this.locationStorage=e}get activeLocation(){if(!this.locationStorage.state.activeId||!this.locationStorage.state.locations?.data)return null;const e=this.locationStorage.state.activeId===l&&this.locationStorage.state.optimalLocationId?this.locationStorage.state.optimalLocationId:this.locationStorage.state.activeId;return this.locationStorage.state.locations.data.locations.find(i=>i.id===e)??null}get activeLocationId(){return this.locationStorage.state.activeId??""}get favoriteLocations(){return this.locationStorage.state.favoriteIds??[]}get locationsData(){const{data:e}=this.locationStorage.state.locations??{};return e?this.addOptimalLocation(e):null}get lastActiveLocation(){return this.locationStorage.state.lastActiveLocationData??null}get needUpdateLocations(){return this.locationStorage.state.locations?this.locationStorage.state.locations.updatedAt+me<Date.now():!0}get defaultLocationId(){return this.locationsData?.locations.find(t=>t.region===P)?.id}get optimalLocationId(){return this.locationStorage.state.optimalLocationId??""}async boot(){await this.locationStorage.sync(),await this.setDefaultStoreValues(),this.bootResolve(),await this.bootPromise}async setDefaultStoreValues(){this.defaultLocationId&&(this.activeLocation?this.optimalLocationId||await this.setOptimalLocation(this.defaultLocationId):(await this.setOptimalLocation(this.defaultLocationId),await this.setActiveLocation(l)))}async setLocationsData(e){await this.locationStorage.setItems({locations:{data:e,updatedAt:Date.now()}}),await this.setDefaultStoreValues()}async setActiveLocation(e){let t;if(typeof e=="string"?t=e:O(e)?t=this.locationsData?.locations.find(s=>{const n=s.region===e.region,c=s.proxyType===e.proxy_type;return n&&c})?.id:t=this.locationsData?.locations.find(s=>s.region===P)?.id,t?await this.locationStorage.setItems({activeId:t}):await this.locationStorage.removeItems("activeId"),this.activeLocation){const i=this.locationsData?.countries.find(n=>n.code===this.activeLocation.countryCode),s={type:this.activeLocation.type,region:this.activeLocation.region,regionName:this.activeLocation.name,countryName:i?.name??"N/A",countryCode:this.activeLocation.countryCode,custom:this.activeLocation.id===l};await this.locationStorage.setItems({lastActiveLocationData:s})}else await this.locationStorage.removeItems("lastActiveLocationData")}async setFavoriteLocations(e){const t=[...new Set([...this.favoriteLocations,...e])];await this.locationStorage.setItems({favoriteIds:t})}async removeFavoriteLocations(e){const t=this.favoriteLocations.filter(i=>!e.includes(i));await this.locationStorage.setItems({favoriteIds:t})}async setOptimalLocation(e){let t;typeof e=="string"?t=e:O(e)?t=this.locationsData?.locations.find(s=>{const n=s.region===e.region,c=s.proxyType===e.proxy_type;return n&&c})?.id:t=this.locationsData?.locations.find(s=>s.region===P)?.id,t?await this.locationStorage.setItems({optimalLocationId:t}):await this.locationStorage.removeItems("optimalLocationId")}addOptimalLocation(e){const t=JSON.parse(JSON.stringify(e)),i=t.locations.find(s=>s.id===this.optimalLocationId);return i&&(t.countries.push({id:l,name:"Optimal location",code:"optimal",phrases:["optimal location"]}),t.locations.push({...i,id:l,countryCode:l,phrases:["optimal location"]}),t.items.push({id:l,type:R.country,items:[{id:l,type:R.location}]})),t}}const ye=new W("location",Se,I),Q=new ge(ye),fe=h({active:B(),interval:f(),count:f(),nextTimestamp:f(),startedAt:f()}),we=h({showState:fe.optional().describe(y.session)}).default({}),_e=new V(we),Le=1440*60*1e3,be=5*1e3,U=[10*1e3,300*1e3,900*1e3,3e3*1e3];class Ce extends j{constructor(e,t,i,s){super(),this.lockScreenStorage=e,this.globalStateService=t,this.messageService=i,this.userService=s}get active(){const e={active:!1},t=this.userService.userType==="free",i=this.globalStateService.installedAt+Le,s=Date.now()>i;return e.active&&t&&s}get showState(){return this.lockScreenStorage.state.showState}async boot(){await this.lockScreenStorage.sync(),this.bootResolve(),await this.bootPromise}async iterateShowState(){const{showState:e}=this.lockScreenStorage.state,t=e?e.count+1:0,i=U[t]??U.at(-1),s=e?.startedAt??Date.now();await this.lockScreenStorage.setItems({showState:{startedAt:s,active:this.active,count:t,interval:be,nextTimestamp:Date.now()+i}}),this.messageService.notifyTab({type:"lock-screen-show-state-change",success:!0,data:this.showState})}async removeShowState(){await this.lockScreenStorage.removeItems("showState"),this.messageService.notifyTab({type:"lock-screen-show-state-change",success:!0,data:this.showState})}}const Ae=new W("lock-screen",_e,I),De=new Ce(Ae,$,b,E);class Te{constructor(e,t,i,s,n,c,r,v,m,p){this.globalStateService=e,this.apiFreeService=t,this.apiPremiumService=i,this.userService=s,this.locationService=n,this.accessService=c,this.analyticsService=r,this.messageService=v,this.eventService=m,this.webrtcService=p,this.eventService.subscribe({"premium-refresh-token-failed":this.premiumRefreshTokenFailedListener.bind(this),"free-refresh-token-failed":this.freeRefreshTokenFailedListener.bind(this)})}async init(){this.apiFreeService.hasTokens||await this.launch()}async launch(){const e=await this.apiFreeService.fetch({method:"POST",url:"apiLaunch",body:{...this.apiFreeService.deviceInfo}});if(!e.success)return await this.criticalErrorOccured({status_code:_.getStatusCodeMessage(e)}),e;await this.apiFreeService.setTokens({accessToken:e.data.accessToken,refreshToken:""});const t=await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});if(!t.success)return await this.criticalErrorOccured({status_code:_.getStatusCodeMessage(t)}),t;if(await this.locationService.setLocationsData(t.data),!this.locationService.activeLocation){const i=e.data.user.default.location;await this.locationService.setOptimalLocation(i),await this.locationService.setActiveLocation(l)}return await this.globalStateService.setCriticalError(!1),{success:!0,data:{success:!0}}}async getCriticalError(){return await Promise.resolve(),{success:!0,data:{state:this.globalStateService.criticalError}}}async login(e){const t=await this.apiPremiumService.fetch({method:"POST",url:"authLogin",body:{...this.apiFreeService.deviceInfo,...e}});if(!t.success)return t;await this.apiPremiumService.setTokens({accessToken:t.data.accessToken,refreshToken:t.data.refreshToken});const i=await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"});if(!i.success)return i;await this.locationService.setLocationsData(i.data),await this.userService.setUser(t.data.user),await this.userService.setSubscription(t.data.user.subscription);const s=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionShield"});if(s.success&&await this.userService.setSubscriptionBundle(s.data),this.userService.userType==="trial"){const n=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionCheckUsedTrial"});if(!n.success){const c={...t.data.user.subscription,status:z.disabled};await this.userService.setSubscription(c);const r=n.errors[0]?.message??"";r&&this.messageService.notifyPopup({type:"toast-message",success:!0,data:{id:"0",message:r,type:"warning"}})}}if(this.userService.hasPermitions("locations","premium")){const n=t.data.user.default.location;await this.locationService.setOptimalLocation(n),await this.locationService.setActiveLocation(l)}else{const n=this.locationService.defaultLocationId;await this.locationService.setOptimalLocation(n),await this.locationService.setActiveLocation(l)}return await this.syncSubscriptionSlots(),this.webrtcService.needEnableWebrtc&&this.webrtcService.enable().catch(()=>{}),{success:!0,data:{success:!0}}}async logout(){const e=await this.apiPremiumService.fetch({method:"POST",url:"authLogout"});if(!e.success)return e;await this.userService.removeSubscription(),await this.userService.removeSubscriptionSlots(),await this.userService.removeSubscriptionBundle(),await this.userService.removeUser();const t=await this.apiFreeService.fetch({method:"POST",url:"apiLaunch",body:{...this.apiFreeService.deviceInfo}});if(!t.success)return await this.criticalErrorOccured({status_code:_.getStatusCodeMessage(t)}),t;await this.apiFreeService.setTokens({accessToken:t.data.accessToken,refreshToken:""});const i=await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});if(!i.success)return i;await this.locationService.setLocationsData(i.data);const s=t.data.user.default.location;return await this.locationService.setOptimalLocation(s),await this.locationService.setActiveLocation(l),this.webrtcService.disable().catch(()=>{}),{success:!0,data:{success:!0}}}async showAccountPage(e){const t=await this.apiPremiumService.fetch({method:"POST",url:"apiAccountAuthToken"});return t.success?(await this.accessService.proceedToWebsiteAccount({authToken:t.data.token,route:e.route,params:e.params??{}}),{success:!0,data:{success:!0}}):t}async registerAccount(){return await this.accessService.proceedToWebsitePage({page:"pricing",params:{utm_campaign:"signup"}}),{success:!0,data:{success:!0}}}async getUserData(){return await Promise.resolve(),{success:!0,data:{user:this.userService.user,subscription:this.userService.subscription,slots:this.userService.subscriptionSlots,hasBundle:this.userService.hasBundleSubscription,canUsePremium:this.userService.canUsePremium}}}async syncSubscriptionSlots(){const e=await this.apiPremiumService.fetch({method:"GET",url:"apiSubscriptionSlot"});return e.success?(await this.userService.setSubscriptionSlots(e.data),{success:!0,data:{slots:e.data}}):e}async logoutAllDevices(){const e=await this.apiPremiumService.fetch({method:"POST",url:"apiSlotRelease"});if(!e.success)return e;const t=await this.syncSubscriptionSlots();return t.success?{success:!0,data:t.data}:t}async premiumRefreshTokenFailedListener(e){(await this.logout()).success&&this.messageService.notifyPopup({type:"authentication-change",success:!0,data:{success:!0}}),this.analyticsService.sendEvent({types:["google-analytics"],name:"premium_refresh_token_failed",data:{status_message:e.disconnectReason,status_code:e.failedReason}})}async criticalErrorOccured(e){this.analyticsService.sendEvent({types:["google-analytics"],name:"critical_error_occured",data:{...e}}),await this.globalStateService.setCriticalError(!0),await this.apiFreeService.removeTokens()}async freeRefreshTokenFailedListener(e){await this.criticalErrorOccured({status_code:"free-refresh-token-failed"}),this.messageService.notifyPopup({type:"critical-error",success:!0,data:{success:!0}}),this.analyticsService.sendEvent({types:["google-analytics"],name:"free_refresh_token_failed",data:{status_message:e.disconnectReason,status_code:e.failedReason}})}}class Ie{constructor(e,t){this.messageService=e,this.authController=t}init(){this.messageService.subscribe({"get-critical-error":this.getCriticalError.bind(this),login:this.login.bind(this),logout:this.logout.bind(this),"register-account":this.registerAccount.bind(this),"show-account-page":this.showAccountPage.bind(this),"get-user-data":this.getUserData.bind(this),"sync-subscription-slots":this.syncSubscriptionSlots.bind(this),"logout-all-devices":this.logoutAllDevices.bind(this)})}async getCriticalError(){return{...await this.authController.getCriticalError(),type:"get-critical-error"}}async login(e){return{...await this.authController.login(e),type:"login"}}async logout(){return{...await this.authController.logout(),type:"logout"}}async registerAccount(){return{...await this.authController.registerAccount(),type:"register-account"}}async showAccountPage(e){return{...await this.authController.showAccountPage(e),type:"show-account-page"}}async getUserData(){return{...await this.authController.getUserData(),type:"get-user-data"}}async syncSubscriptionSlots(){return{...await this.authController.syncSubscriptionSlots(),type:"sync-subscription-slots"}}async logoutAllDevices(){return{...await this.authController.logoutAllDevices(),type:"logout-all-devices"}}}const ke=new Te($,H,J,E,Q,Z,q,b,I,G),Ve=new Ie(b,ke);class T{static CONNECTED_ICONS={16:"/icons/16.png",32:"/icons/32.png",48:"/icons/48.png",64:"/icons/64.png",128:"/icons/128.png"};static DISCONNECTED_ICONS={16:"/icons/16-grey.png",32:"/icons/32-grey.png",48:"/icons/48-grey.png",64:"/icons/64-grey.png",128:"/icons/128-grey.png"};async setImage(e){const t=e==="connected"?T.CONNECTED_ICONS:T.DISCONNECTED_ICONS;await d.action.setIcon({path:t}),await Promise.resolve(this)}async setTooltip(e){const i=d.runtime.getManifest().name;await d.action.setTitle({title:`${i}
${e}`}),await Promise.resolve(this)}}const Pe=new T,Re=["https://captive.apple.com/"],Ee="https://cloudflare.com/cdn-cgi/trace",N="n/a";class Fe{constructor(e,t,i,s,n,c,r,v,m,p,g,w,C,u,S,A,D){this.messageService=e,this.analyticsService=t,this.eventService=i,this.fetchService=s,this.connectionService=n,this.apiFreeService=c,this.apiPremiumService=r,this.userService=v,this.locationService=m,this.exclusionsService=p,this.proxyService=g,this.iconService=w,this.i18nService=C,this.appService=u,this.notificationService=S,this.lockScreenService=A,this.introOfferService=D,this.eventService.subscribe({"free-refresh-token-failed":this.disconnect.bind(this),"premium-refresh-token-failed":this.disconnect.bind(this)})}get needAuthTrigger(){return this.appService.majorBrowserVersion===0?!1:this.appService.majorBrowserVersion<122}async init(){await this.updateIcon(),(!this.locationService.locationsData||this.locationService.needUpdateLocations)&&await this.updateLocationData(),this.connectionService.currentIp||await this.updateIpAddress()}async getLocationsData(){return await Promise.resolve(),{success:!0,data:{data:this.locationService.locationsData,activeId:this.locationService.activeLocationId,favoriteIds:this.locationService.favoriteLocations}}}async getLastActiveLocation(){return await Promise.resolve(),this.locationService.lastActiveLocation?{success:!0,data:this.locationService.lastActiveLocation}:{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.no-location")}]}}async updateLocations(){const e=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"}):await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});return e.success?(await this.locationService.setLocationsData(e.data),{success:!0,data:{data:this.locationService.locationsData,activeId:this.locationService.activeLocationId,favoriteIds:this.locationService.favoriteLocations}}):e}async setActiveLocation(e){return await this.locationService.setActiveLocation(e),{success:!0,data:{success:!0}}}async setFavoriteLocations(e){return e.action==="add"?await this.locationService.setFavoriteLocations(e.list):await this.locationService.removeFavoriteLocations(e.list),{success:!0,data:{success:!0}}}async connect(){const e=Date.now();if(await this.changeConnectionStatus("connecting"),!this.locationService.activeLocation)return await this.changeConnectionStatus("disconnected"),{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.no-location")}]};const{name:t,region:i}=this.locationService.activeLocation,s=`${i}, ${t}`;this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_tried",data:{event_properties__screen_name:"vpn",event_properties__location:s}}),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_tried",data:{country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:"no_addresses",server_region:this.locationService.activeLocation.id}});const n={protocol:"https",region:this.locationService.activeLocation.region,type:this.locationService.activeLocation.type},c=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiServerList",body:n}):await this.apiFreeService.fetch({method:"POST",url:"apiServerList",body:n});if(!c.success)return await this.changeConnectionStatus("disconnected"),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_failed_backend",data:{country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:"no_addresses",server_region:this.locationService.activeLocation.id,status_code:_.getStatusCodeMessage(c)}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_backend",data:{event_properties__screen_name:"vpn",event_properties__location:s,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:"no_addresses"}}),{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.server-config")}]};const r=c.data.map(u=>{const S=this.appService.isBlockAds?u.rpz_port:u.port;return{addresses:u.addresses,protocol:u.protocol,port:S}}),{username:v,password:m}=c.data[0];let p=!1,g="";for(let u=0;u<r.length;u+=1){const S=r[u],A=await this.proxyService.enable({serverConfig:[S],credentials:{username:v,password:m},nonRoutableNets:this.exclusionsService.nonRoutableNets,exclusionList:this.exclusionsService.exclusionList});if(!A.status){await this.changeConnectionStatus("disconnected"),p=!1,g=A.cause==="not_controllable"?this.i18nService.t("base:connect-errors.not-controllable"):this.i18nService.t("base:connect-errors.controlled-by-other-extensions");break}const D={country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:S.addresses[0],server_region:this.locationService.activeLocation.id};if(this.needAuthTrigger&&!await this.triggerAuthRequiredListener()){await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics"],name:"connection_failed_create_tab",data:{...D,status_code:"tab-create"}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_create_tab",data:{event_properties__screen_name:"vpn",event_properties__location:s,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:S.addresses[0]}});continue}const x=await this.checkInternetConnection();if(x.success){p=!0;break}else await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics"],name:"connection_failed_availability_domain_1",data:{...D,status_code:_.getStatusCodeMessage(x)}})}const w=r.flatMap(u=>u.addresses).join(", "),C={country:this.locationService.activeLocation.countryCode,city:this.locationService.activeLocation.name,server_type:this.locationService.activeLocation.type,server_address:w,server_region:this.locationService.activeLocation.id};return p?(await this.connectionService.incrementConnectionCount(),await this.connectionService.setConnectedAt(),await this.updateIpAddress(),await this.changeConnectionStatus("connected"),await this.updateIcon(),await this.createDownloadNotification(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_succeeded",data:C}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_succeeded",data:{event_properties__screen_name:"vpn",event_properties__location:s,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:w}}),{success:!0,data:{success:!0}}):(await this.changeConnectionStatus("disconnected"),await this.proxyService.disable(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"connection_failed_check",data:{...C,status_code:"loop_fixed_server"}}),this.analyticsService.sendEvent({types:["aws-kinesis"],name:"connection_failed_check",data:{event_properties__screen_name:"vpn",event_properties__location:s,event_properties__time_to_connect:Date.now()-e,event_properties__auto_connection:"",event_properties__server_address:w}}),{success:!1,errors:[{code:0,status:0,name:"",message:g||this.i18nService.t("base:connect-errors.captive")}]})}async disconnect(e){if(await this.changeConnectionStatus("disconnecting"),!await this.proxyService.disable())return{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:disconnect-errors.remove-proxy")}]};await this.connectionService.resetConnectedAt(),await this.updateIpAddress(),await this.changeConnectionStatus("disconnected"),await this.updateIcon();const{name:i,region:s}=this.locationService.activeLocation??{name:"",region:""},n=`${s}, ${i}`;return this.analyticsService.sendEvent({types:["aws-kinesis"],name:"disconnected",data:{event_properties__screen_name:"vpn",event_properties__location:n,event_properties__disconnect_reason:e.disconnectReason,event_properties__failed_reason:e.failedReason}}),{success:!0,data:{success:!0}}}async getConnectionState(){await Promise.resolve();const e=this.connectionService.currentIp??N;return{success:!0,data:{status:this.connectionService.status,ip:e,connectionCount:this.connectionService.connectionCount,connectedAt:this.connectionService.connectedAt}}}async getAutoConnectSetting(){return await Promise.resolve(),{success:!0,data:{status:this.connectionService.useAutoConnect}}}async setAutoConnectSetting(e){return await this.connectionService.setAutoConnect(e.status),{success:!0,data:{success:!0}}}async updateApiDomain(){return this.apiFreeService.isDomainAvailable||await this.apiFreeService.updateDomainData(),this.apiPremiumService.isDomainAvailable||await this.apiPremiumService.updateDomainData(),{success:!0,data:{success:!0}}}async triggerAuthRequiredListener(){const e=function(i){return new Promise((s,n)=>{d.tabs.create({url:i,active:!1}).then(c=>{const r=function(p,g){g.status==="complete"&&p===c.id&&(d.tabs.onUpdated.removeListener(r),d.tabs.remove(p).catch(()=>{}),clearTimeout(v),s(c))},v=setTimeout(()=>{d.tabs.onUpdated.removeListener(r),c.id&&d.tabs.remove(c.id).catch(()=>{}),clearTimeout(v),n(new Error("triggerAuthRequiredListener timeout reject"))},5e3);d.tabs.onUpdated.addListener(r)}).catch(n)})};try{const t=this.userService.hasPermitions("domain","premium")?this.apiPremiumService.apiDomainUrl:this.apiFreeService.apiDomainUrl;return await e(t),!0}catch{return!1}}async updateIpAddress(){const e=await this.fetchService.request({method:"GET",url:Ee});if(e.success)try{const t=e.data.trim().split(/\n/).map(s=>s.split("=")),i=Object.fromEntries(t);await this.connectionService.setIpAddress(i.ip)}catch{this.analyticsService.sendEvent({types:["google-analytics"],name:"ip_parse_failed"})}else await this.connectionService.removeIpAddress(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"ip_check_failed"})}async updateIcon(){if(this.connectionService.isConnected){const e=this.locationService.activeLocation?.name??"VeePN",t=this.i18nService.t("base:connect-status.on",{tr_location:e});await this.iconService.setImage("connected"),await this.iconService.setTooltip(t)}else{const e=this.i18nService.t("base:connect-status.off");await this.iconService.setImage("disconnected"),await this.iconService.setTooltip(e)}}async updateLocationData(){const e=this.userService.hasPermitions("domain","premium")?await this.apiPremiumService.fetch({method:"POST",url:"apiLocationList"}):await this.apiFreeService.fetch({method:"POST",url:"apiLocationList"});e.success&&await this.locationService.setLocationsData(e.data)}async changeConnectionStatus(e){e==="disconnected"&&(await this.appService.setBlockAds(!1),await this.lockScreenService.removeShowState(),await this.introOfferService.deactivateBanner()),e==="connected"&&(await this.lockScreenService.iterateShowState(),await this.introOfferService.activateBanner()),await this.connectionService.setConnectionStatus(e);const t=this.connectionService.currentIp??N;this.messageService.notifyPopup({type:"connection-change",success:!0,data:{status:this.connectionService.status,ip:t,connectionCount:this.connectionService.connectionCount,connectedAt:this.connectionService.connectedAt}})}async createDownloadNotification(){this.connectionService.connectionCount<=3||Date.now()<this.appService.downloadNotificationTimestamp||(await this.notificationService.notify({options:{type:"image",title:this.i18nService.t("base:download-notification.title"),imageUrl:d.runtime.getURL("/images/desktop-notification.jpg"),message:this.i18nService.t("base:download-notification.message")},callback:"download-app"}),await this.appService.incrementDownloadNotificationTimestamp(),this.analyticsService.sendEvent({types:["google-analytics","amplitude"],name:"notify_popup_pc_download_shown"}))}async checkInternetConnection(){const e=await this.fetchService.request({method:"GET",url:Re[0],cache:"no-cache"});return e.success&&e.data.toLocaleLowerCase().includes("success")?{success:!0,data:{success:!0}}:{success:!1,errors:[{code:0,status:0,name:"",message:this.i18nService.t("base:connect-errors.captive")}]}}}class xe{constructor(e,t){this.messageService=e,this.connectionController=t}init(){this.messageService.subscribe({connect:this.connect.bind(this),disconnect:this.disconnect.bind(this),"get-connection-state":this.getConnectionState.bind(this),"get-locations-data":this.getLocationsData.bind(this),"get-last-active-location":this.getLastActiveLocation.bind(this),"update-locations-data":this.updateLocations.bind(this),"set-active-location":this.setActiveLocation.bind(this),"set-favorite-locations":this.setFavoriteLocations.bind(this),"update-api-domain":this.updateApiDomain.bind(this),"get-auto-connect-setting":this.getAutoConnectSetting.bind(this),"set-auto-connect-setting":this.setAutoConnectSetting.bind(this)})}async connect(){return{...await this.connectionController.connect(),type:"connect"}}async disconnect(e){return{...await this.connectionController.disconnect(e),type:"disconnect"}}async getConnectionState(){return{...await this.connectionController.getConnectionState(),type:"get-connection-state"}}async getLocationsData(){return{...await this.connectionController.getLocationsData(),type:"get-locations-data"}}async getLastActiveLocation(){return{...await this.connectionController.getLastActiveLocation(),type:"get-last-active-location"}}async updateLocations(){return{...await this.connectionController.updateLocations(),type:"update-locations-data"}}async setActiveLocation(e){return{...await this.connectionController.setActiveLocation(e),type:"set-active-location"}}async setFavoriteLocations(e){return{...await this.connectionController.setFavoriteLocations(e),type:"set-favorite-locations"}}async updateApiDomain(){return{...await this.connectionController.updateApiDomain(),type:"update-api-domain"}}async getAutoConnectSetting(){return{...await this.connectionController.getAutoConnectSetting(),type:"get-auto-connect-setting"}}async setAutoConnectSetting(e){return{...await this.connectionController.setAutoConnectSetting(e),type:"set-auto-connect-setting"}}}const Oe=new Fe(b,q,I,K,X,H,J,E,Q,Y,ee,Pe,te,ie,se,De,ae),je=new xe(b,Oe);export{F as L,l as O,oe as R,Ve as a,je as b,Oe as c,Q as d,ke as e,k as f,De as l};
